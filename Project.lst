Microsoft (R) Macro Assembler Version 14.28.29912.0	    03/16/21 19:48:57
5String Primitives and Macros     (Proj6_nicholj3.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_nicholj3.asm)

				; Author: Jonathan Nichols
				; Last Modified: 3/16/21
				; OSU email address: nicholj3@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 3/14/21
				; Description: Takes user input numbers, converts back and forth between string and integer,
				;				and displays basic stats about the data.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays a prompt, then gets the users input and stores it in memory.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				;			prompt = address of the prompt
				;			stringAddr = address to store input
				;			bufferSize = number of bytes in the buffer
				;			length = number of bytes entered
				;			
				;
				; returns: 
				;			stringAddr = generated string address
				; ---------------------------------------------------------------------------------


				mGetString MACRO prompt:REQ, stringAddr:REQ, bufferSize:REQ, inputLength:REQ

					; preserve registers
					push	EDX
					push	ECX
					push	EAX
					
					; output the prompt
					mov		EDX, prompt
					call	WriteString

					; read the string
					mov		EDX, stringAddr
					mov		ECX, bufferSize
					call	ReadString
					mov		inputLength, EAX

					; restore registers
					pop		EAX
					pop		ECX
					pop		EDX

				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Outputs the string stored a specified memory location.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				;			stringAddr = address to store input
				;			
				; returns: none
				; ---------------------------------------------------------------------------------

				mDisplayString MACRO stringAddr:REQ

					; preserve register
					push	EDX

					; output the string
					mov		EDX, stringAddr
					call	WriteString

					; restore register
					pop		EDX

				ENDM


 00000000			.data

 00000000  0000000D [		inputString	BYTE	13 DUP(0)
	    00
	   ]
 0000000D  0000000D [		outString	BYTE	13 DUP(0)
	    00
	   ]
 0000001A  0000000D [		revString	BYTE	13 DUP(0)
	    00
	   ]
 00000027 2C 20 00		delimiter	BYTE	", ",0
 0000002A 00000000		inputNum	SDWORD	0
 0000002E 00000000		inputLen	DWORD	?
 00000032  0000000A [		numArray	SDWORD	10 DUP(?)
	    00000000
	   ]
 0000005A  0000000A [		lenArray	DWORD	10 DUP(?)
	    00000000
	   ]
 00000082 00000000		sum			SDWORD	0
 00000086 00000000		average		SDWORD	0
 0000008A 50 52 4F 47 52	intro		BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",13,10,"Written by: Jonathan Nichols",13,10,13,10
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 3A 20 4A
	   6F 6E 61 74 68
	   61 6E 20 4E 69
	   63 68 6F 6C 73
	   0D 0A 0D 0A
 000000E8  50 6C 65 61 73				BYTE	"Please provide 10 signed decimal integers.",13,10,"Each number needs to be small enough to fit into a 32 bit register. "
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   74 6F 20 61 20
	   33 32 20 62 69
	   74 20 72 65 67
	   69 73 74 65 72
	   2E 20
 00000158  41 66 74 65 72				BYTE	"After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,13,10,0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 0D 0A 00
 000001D9 50 6C 65 61 73	prompt1		BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001F8 50 6C 65 61 73	prompt2		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 0000020B 45 52 52 4F 52	error		BYTE	"ERROR: You did not enter a signed number or your number was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
 00000252 0D 0A 59 6F 75	title1		BYTE	13,10,"You entered the following numbers: ",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 0000027A 54 68 65 20 73	title2		BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000298 54 68 65 20 72	title3		BYTE	"The rounded average is : ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 3A 20
	   00
 000002B2 54 68 61 6E 6B	goodbye		BYTE	"Thanks for playing!",13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 0D
	   0A 00

 00000000			.code
 00000000			main PROC

					; introduce the program
					mDisplayString OFFSET intro
 00000000  52		     1		push	EDX
 00000001  BA 0000008A R     1		mov		EDX, OFFSET intro
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		EDX

					; read values
 0000000C  B9 0000000A			mov		ECX, 10
 00000011  BF 00000032 R		mov		EDI, OFFSET numArray
 00000016			_readLoop:
 00000016  68 00000000 R			push	OFFSET inputString
 0000001B  6A 0D				push	SIZEOF inputString
 0000001D  68 0000002A R			push	OFFSET inputNum
 00000022  68 0000002E R			push	OFFSET inputLen
 00000027  68 000001D9 R			push	OFFSET prompt1
 0000002C  68 000001F8 R			push	OFFSET prompt2
 00000031  68 0000020B R			push	OFFSET error
 00000036  E8 000000E6				call	ReadVal	

						; store the results in the arrays
 0000003B  8B 15 0000002A R			mov		EDX, inputNum
 00000041  89 17				mov		[EDI], EDX
 00000043  83 C7 04				add		EDI, TYPE numArray
 00000046  E2 CE			loop	_readLoop

					; calculate sum and average
 00000048  68 00000032 R		push	OFFSET numArray
 0000004D  6A 04			push	TYPE numArray
 0000004F  68 00000082 R		push	OFFSET sum
 00000054  68 00000086 R		push	OFFSET average
 00000059  E8 00000187			call	CalculateStats

					; display numbers
					mDisplayString OFFSET title1
 0000005E  52		     1		push	EDX
 0000005F  BA 00000252 R     1		mov		EDX, OFFSET title1
 00000064  E8 00000000 E     1		call	WriteString
 00000069  5A		     1		pop		EDX
 0000006A  BE 00000032 R		mov		ESI, OFFSET numArray

					; display the first number
 0000006F  8B 16			mov		EDX, [ESI]
 00000071  83 C6 04			add		ESI, TYPE numArray
 00000074  52				push	EDX
 00000075  68 0000000D R		push	OFFSET outString
 0000007A  68 0000001A R		push	OFFSET revString
 0000007F  E8 00000196			call	WriteVal

					; display the other numbers with the delimter
 00000084  B9 00000009			mov		ECX, 9
 00000089			_writeLoop:
						mDisplayString OFFSET delimiter
 00000089  52		     1		push	EDX
 0000008A  BA 00000027 R     1		mov		EDX, OFFSET delimiter
 0000008F  E8 00000000 E     1		call	WriteString
 00000094  5A		     1		pop		EDX
 00000095  8B 16				mov		EDX, [ESI]
 00000097  83 C6 04				add		ESI, TYPE numArray
 0000009A  52					push	EDX
 0000009B  68 0000000D R			push	OFFSET outString
 000000A0  68 0000001A R			push	OFFSET revString
 000000A5  E8 00000170				call	WriteVal
						
 000000AA  E2 DD			loop	_writeLoop

 000000AC  E8 00000000 E		call	Crlf
 000000B1  E8 00000000 E		call	Crlf

					; display sum
					mDisplayString OFFSET title2
 000000B6  52		     1		push	EDX
 000000B7  BA 0000027A R     1		mov		EDX, OFFSET title2
 000000BC  E8 00000000 E     1		call	WriteString
 000000C1  5A		     1		pop		EDX
 000000C2  8B 15 00000082 R		mov		EDX, sum
 000000C8  52				push	EDX
 000000C9  68 0000000D R		push	OFFSET outString
 000000CE  68 0000001A R		push	OFFSET revString
 000000D3  E8 00000142			call	WriteVal

 000000D8  E8 00000000 E		call	Crlf
 000000DD  E8 00000000 E		call	Crlf

					; display average
					mDisplayString OFFSET title3
 000000E2  52		     1		push	EDX
 000000E3  BA 00000298 R     1		mov		EDX, OFFSET title3
 000000E8  E8 00000000 E     1		call	WriteString
 000000ED  5A		     1		pop		EDX
 000000EE  8B 15 00000086 R		mov		EDX, average
 000000F4  52				push	EDX
 000000F5  68 0000000D R		push	OFFSET outString
 000000FA  68 0000001A R		push	OFFSET revString
 000000FF  E8 00000116			call	WriteVal

 00000104  E8 00000000 E		call	Crlf
 00000109  E8 00000000 E		call	Crlf

					; say goodbye
					mDisplayString OFFSET goodbye
 0000010E  52		     1		push	EDX
 0000010F  BA 000002B2 R     1		mov		EDX, OFFSET goodbye
 00000114  E8 00000000 E     1		call	WriteString
 00000119  5A		     1		pop		EDX

					Invoke ExitProcess,0	; exit to operating system
 0000011A  6A 00	   *	    push   +000000000h
 0000011C  E8 00000000 E   *	    call   ExitProcess
 00000121			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Reads a string, validates that it can be converted to a 32bit signed integer,
				;	then converts the string to int.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives: 
				;			[ebp+32] = address of input buffer
				;			[ebp+28] = size of input buffer
				;			[ebp+24] = address of input number
				;			[ebp+20] = address of number length
				;			[ebp+16] = address of prompt1
				;			[ebp+12] = address of prompt2
				;			[ebp+8] = address of error
				;
				; returns: The data variable inputNum.
				; ---------------------------------------------------------------------------------

 00000121			ReadVal PROC

					; preserve registers and assign static pointer
 00000121  55				push	EBP
 00000122  8B EC			mov		EBP, ESP
 00000124  56				push	ESI
 00000125  57				push	EDI
 00000126  51				push	ECX
 00000127  52				push	EDX
 00000128  50				push	EAX
 00000129  53				push	EBX

					; get user input
					mGetString [EBP+16], [EBP+32], [EBP+28], [EBP+20]
 0000012A  52		     1		push	EDX
 0000012B  51		     1		push	ECX
 0000012C  50		     1		push	EAX
 0000012D  8B 55 10	     1		mov		EDX, [EBP+16]
 00000130  E8 00000000 E     1		call	WriteString
 00000135  8B 55 20	     1		mov		EDX, [EBP+32]
 00000138  8B 4D 1C	     1		mov		ECX, [EBP+28]
 0000013B  E8 00000000 E     1		call	ReadString
 00000140  89 45 14	     1		mov		[EBP+20], EAX
 00000143  58		     1		pop		EAX
 00000144  59		     1		pop		ECX
 00000145  5A		     1		pop		EDX
					
 00000146			_validate:


					; setup registers
 00000146  8B 75 20			mov		ESI, [EBP+32]
 00000149  8B 7D 18			mov		EDI, [EBP+24]
 0000014C  8B 4D 14			mov		ECX, [EBP+20]
 0000014F  BA 00000000			mov		EDX, 0
 00000154  BB 00000001			mov		EBX, 1

					; length  must be greater than 1 and less than 12
 00000159  83 F9 01			cmp		ECX, 1
 0000015C  7E 47			jle		_error
 0000015E  83 F9 0C			cmp		ECX, 12
 00000161  7D 42			jge		_error

					; check if first digit is a sign, otherwise assume positive and skip ahead
 00000163  AC				lodsb	
 00000164  49				dec		ECX
 00000165  3C 2B			cmp		AL, '+'
 00000167  74 0C			je		_nextChar
 00000169  3C 2D			cmp		AL, '-'
 0000016B  74 03			je		_negativeSign
 0000016D  41				inc		ECX
 0000016E  EB 06			jmp		_noSign
					
 00000170			_negativeSign:
 00000170  BB FFFFFFFF			mov		EBX, -1

 00000175			_nextChar:

 00000175  AC					lodsb

 00000176				_noSign:
						; make sure that next value is a digit, then convert to number
 00000176  3C 30				cmp		AL, 48
 00000178  7C 2B				jl		_error
 0000017A  3C 39				cmp		AL, 57
 0000017C  7F 27				jg		_error
 0000017E  2C 30				sub		AL, 48	

						; multiply input number by 10
 00000180  53					push	EBX
 00000181  50					push	EAX
 00000182  8B C2				mov		EAX, EDX
 00000184  BA 00000000				mov		EDX, 0
 00000189  BB 0000000A				mov		EBX, 10
 0000018E  F7 EB				imul	EBX
 00000190  83 FA 00				cmp		EDX, 0			; EDX should stay zero if no overflow occurred
 00000193  75 10				jne		_error
 00000195  8B D0				mov		EDX, EAX		; store the result back in EDX
 00000197  58					pop		EAX

						; add the new digit and check carry flag
 00000198  0F BE D8				movsx	EBX, AL
 0000019B  03 D3				add		EDX, EBX
 0000019D  70 05				jo		_overflow
 0000019F  5B					pop		EBX

 000001A0  E2 D3			loop	_nextChar
 000001A2  EB 31			jmp		_valid

 000001A4			_overflow:
					; clean up the pushed register
 000001A4  5B				pop		EBX

 000001A5			_error:
					; reset number, display error message, and prompt for new string
 000001A5  BA 00000000			mov		EDX, 0
					mDisplayString [EBP+8]
 000001AA  52		     1		push	EDX
 000001AB  8B 55 08	     1		mov		EDX, [EBP+8]
 000001AE  E8 00000000 E     1		call	WriteString
 000001B3  5A		     1		pop		EDX
					mGetString	[EBP+12], [EBP+32], [EBP+28], [EBP+20]
 000001B4  52		     1		push	EDX
 000001B5  51		     1		push	ECX
 000001B6  50		     1		push	EAX
 000001B7  8B 55 0C	     1		mov		EDX, [EBP+12]
 000001BA  E8 00000000 E     1		call	WriteString
 000001BF  8B 55 20	     1		mov		EDX, [EBP+32]
 000001C2  8B 4D 1C	     1		mov		ECX, [EBP+28]
 000001C5  E8 00000000 E     1		call	ReadString
 000001CA  89 45 14	     1		mov		[EBP+20], EAX
 000001CD  58		     1		pop		EAX
 000001CE  59		     1		pop		ECX
 000001CF  5A		     1		pop		EDX
 000001D0  E9 FFFFFF71			jmp		_validate


 000001D5			_valid:
					; adjust if negative and store the value
 000001D5  8B C2			mov		EAX, EDX
 000001D7  F7 EB			imul	EBX
 000001D9  89 07			mov		[EDI], EAX

					; restore registers
 000001DB  5B				pop		EBX
 000001DC  58				pop		EAX
 000001DD  5A				pop		EDX
 000001DE  59				pop		ECX
 000001DF  5F				pop		EDI
 000001E0  5E				pop		ESI
 000001E1  5D				pop		EBP
 000001E2  C2 001C			ret		28



 000001E5			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: CalculateStats
				; 
				; Takes an array of signed integers, then calculates the sum and rounded average.
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives: 
				;			[ebp+20] = address of numArray
				;			[ebp+16] = type of numArray
				;			[ebp+12] = address of sum
				;			[ebp+8] = address of average
				;
				; returns: The data variables sum and average.
				; ---------------------------------------------------------------------------------


 000001E5			CalculateStats PROC
					
					; preserve registers and assign static pointer
 000001E5  55				push	EBP
 000001E6  8B EC			mov		EBP, ESP
 000001E8  56				push	ESI
 000001E9  57				push	EDI
 000001EA  51				push	ECX
 000001EB  50				push	EAX

					; setup registers for the sum loop
 000001EC  8B 75 14			mov		ESI, [EBP+20]
 000001EF  B9 0000000A			mov		ECX, 10
 000001F4  B8 00000000			mov		EAX, 0

					; calculate the sum
 000001F9			_sumLoop:
 000001F9  03 06				add		EAX, [ESI]
 000001FB  03 75 10				add		ESI, [EBP+16]
 000001FE  E2 F9			loop	_sumLoop

					; store the sum
 00000200  8B 7D 0C			mov		EDI, [EBP+12]
 00000203  89 07			mov		[EDI], EAX

					; calculate the average
 00000205  B9 0000000A			mov		ECX, 10
 0000020A  99				cdq	
 0000020B  F7 F9			idiv	ECX
					
					; store the average
 0000020D  8B 7D 08			mov		EDI, [EBP+8]
 00000210  89 07			mov		[EDI], EAX

					; restore registers and return
 00000212  58				pop		EAX
 00000213  59				pop		ECX
 00000214  5F				pop		EDI
 00000215  5E				pop		ESI
 00000216  5D				pop		EBP
 00000217  C2 0010			ret		16


 0000021A			CalculateStats ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				; 
				; Reads a signed int, converts to string, and outputs to the screen.
				;
				; Preconditions: none
				;
				; Postconditions: Output string and reverse string variables will be changed.
				;
				; Receives: 
				;			[ebp+16] = signed integer
				;			[ebp+12] = output string
				;			[ebp+8] = reverse string
				;
				; returns: none
				; ---------------------------------------------------------------------------------

 0000021A			WriteVal PROC
					
					; preserve registers and assign static pointer
 0000021A  55				push	EBP
 0000021B  8B EC			mov		EBP, ESP
 0000021D  52				push	EDX
 0000021E  50				push	EAX
 0000021F  53				push	EBX
 00000220  51				push	ECX
 00000221  57				push	EDI
 00000222  56				push	ESI

					; determine if the value is positive or negative
 00000223  8B 55 10			mov		EDX, [EBP+16]
 00000226  83 FA 00			cmp		EDX, 0
 00000229  7C 04			jl		_negative
 0000022B  B0 2B			mov		AL, '+'
 0000022D  EB 04			jmp		_setup
 0000022F			_negative:
 0000022F  B0 2D			mov		AL, '-'
 00000231  F7 DA			neg		EDX

					; setup registers for the first loop
 00000233			_setup:
 00000233  50				push	EAX
 00000234  B9 00000000			mov		ECX, 0
 00000239  8B 7D 08			mov		EDI, [EBP+8]

 0000023C			_nextDigit:
						; divide the number by 10
 0000023C  8B C2				mov		EAX, EDX
 0000023E  BB 0000000A				mov		EBX, 10
 00000243  99					cdq
 00000244  F7 FB				idiv	EBX

						; store the remainder digit
 00000246  50					push	EAX
 00000247  8B C2				mov		EAX, EDX
 00000249  04 30				add		AL, 48
 0000024B  AA					stosb
 0000024C  58					pop		EAX
					
						; prepare for next iteration
 0000024D  41					inc		ECX
 0000024E  8B D0				mov		EDX, EAX
 00000250  83 F8 00				cmp		EAX, 0
 00000253  75 E7			jne		_nextDigit

					; determine if we need to add the negative sign
 00000255  58				pop		EAX
 00000256  3C 2D			cmp		AL, '-'
 00000258  74 02			je		_addsign
 0000025A  EB 02			jmp		_skipSign
 0000025C			_addSign:
 0000025C  AA				stosb
 0000025D  41				inc		ECX

 0000025E			_skipSign:
					; setup the registers for the next loop
 0000025E  8B 75 08			mov		ESI, [EBP+8]
 00000261  03 F1			add		ESI, ECX
 00000263  4E				dec		ESI
 00000264  8B 7D 0C			mov		EDI, [EBP+12]

					; reverse the string
 00000267			_reverse:
 00000267  FD					STD
 00000268  AC					LODSB
 00000269  FC					CLD
 0000026A  AA					STOSB
 0000026B  E2 FA			LOOP	_reverse

					; add the null terminator
 0000026D  B0 00			mov		AL, 0
 0000026F  AA				stosb
					
					; output to screen
					mDisplayString [EBP+12]
 00000270  52		     1		push	EDX
 00000271  8B 55 0C	     1		mov		EDX, [EBP+12]
 00000274  E8 00000000 E     1		call	WriteString
 00000279  5A		     1		pop		EDX

					; restore registers and return
 0000027A  5E				pop		ESI
 0000027B  5F				pop		EDI
 0000027C  59				pop		ECX
 0000027D  5B				pop		EBX
 0000027E  58				pop		EAX
 0000027F  5A				pop		EDX
 00000280  5D				pop		EBP
 00000281  C2 0010			ret		16

 00000284			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29912.0	    03/16/21 19:48:57
5String Primitives and Macros     (Proj6_nicholj3.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002C8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000284 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateStats . . . . . . . . .	P Near	 000001E5 _TEXT	Length= 00000035 Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 000001F9 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000121 _TEXT	Length= 000000C4 Public STDCALL
  _validate  . . . . . . . . . .	L Near	 00000146 _TEXT	
  _negativeSign  . . . . . . . .	L Near	 00000170 _TEXT	
  _nextChar  . . . . . . . . . .	L Near	 00000175 _TEXT	
  _noSign  . . . . . . . . . . .	L Near	 00000176 _TEXT	
  _overflow  . . . . . . . . . .	L Near	 000001A4 _TEXT	
  _error . . . . . . . . . . . .	L Near	 000001A5 _TEXT	
  _valid . . . . . . . . . . . .	L Near	 000001D5 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000021A _TEXT	Length= 0000006A Public STDCALL
  _negative  . . . . . . . . . .	L Near	 0000022F _TEXT	
  _setup . . . . . . . . . . . .	L Near	 00000233 _TEXT	
  _nextDigit . . . . . . . . . .	L Near	 0000023C _TEXT	
  _addSign . . . . . . . . . . .	L Near	 0000025C _TEXT	
  _skipSign  . . . . . . . . . .	L Near	 0000025E _TEXT	
  _reverse . . . . . . . . . . .	L Near	 00000267 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000121 Public STDCALL
  _readLoop  . . . . . . . . . .	L Near	 00000016 _TEXT	
  _writeLoop . . . . . . . . . .	L Near	 00000089 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 00000086 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delimiter  . . . . . . . . . . .	Byte	 00000027 _DATA	
error  . . . . . . . . . . . . .	Byte	 0000020B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000002B2 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputLen . . . . . . . . . . . .	DWord	 0000002E _DATA	
inputNum . . . . . . . . . . . .	DWord	 0000002A _DATA	
inputString  . . . . . . . . . .	Byte	 00000000 _DATA	
intro  . . . . . . . . . . . . .	Byte	 0000008A _DATA	
lenArray . . . . . . . . . . . .	DWord	 0000005A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000032 _DATA	
outString  . . . . . . . . . . .	Byte	 0000000D _DATA	
prompt1  . . . . . . . . . . . .	Byte	 000001D9 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 000001F8 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revString  . . . . . . . . . . .	Byte	 0000001A _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000082 _DATA	
title1 . . . . . . . . . . . . .	Byte	 00000252 _DATA	
title2 . . . . . . . . . . . . .	Byte	 0000027A _DATA	
title3 . . . . . . . . . . . . .	Byte	 00000298 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
